
    Source code - Code written by a programmer that can be retrieved for use in another program.

    Machine code - The binary language spoken by computers.

    Interpreter - A program that directly executes the instructions written in a programming language.

    Compiler - Translates the human readable instructions you write into machine readable code.

    2GL, 3GL, 4GL - 2nd Generation assembler languages contain human-readable notations but is primarily an intermediary between
machine code and 3rd Gen languages like COBOL and BASIC. 3rd Gen Languages are more user friendly and contain a vast amount of
functions but still require advanced training to be able to program. 4th Gen languages are more geared towards the user
and are somewhat of an advancement on 3rd Gen but tend to be used for programming databases, these include Python, SQL and Ruby,
which tend to be a good starting point for someone to break into programming.

    Executable - An executable is a file type that is packaged with a sequence of instructions, ready to run once given
approval from the system administrator.

    Expressions - A syntax computation composed of one or more constraints, variables, functions and operators.

    Operators and Operands - Behaves similar to a function but generally refers to arithmetic or logical operations.

    Syntax Errors - Refers to documents or code that is written incorrectly in a programming language, usually detected
instantly by the interpreter for corrective adjustments to be made.

    Logical Errors - A program bug that causes a program to operate incorrectly and often produces an undesired output
and harder to detect than syntax errors as they are only typically detectable at runtime, and are best resolved through
iterative testing.

    Boolean Expression - A piece of code that can either be a 1 or a 0 which corresponds to True or False value.

    Relational Operator - A construct or operator that tests or defines some kind of relation between two entities

    Logical Operator - Used primarily for arithmetic operations

    Operator Chaining - Comparison operators are used together to create a more complex expression

    Ternary Operator - These are similar to an 'if' statement but is written on a single line, instead of multiple

    Iteration - Repeated instructions in a loop

    Nested Loop - A loop inside a loop

    #Data Types:

int - used to store whole numbers, e.g, 100
float - used to store numbers which include a fractional part e.g. 20.23
boolean - used to store True or False values
string - used to store textual data, e.g. "Dead Parrot"

    #Supported escape sequences:

\n Insert a newline character in a string.
\t Insert a horizontal tab.
\\ Insert a backslash character in a string.
\" Insert a double quote character in a string.
\' Insert a single quote character in a string.

The methods that mutate a list are -
    extend() - appends multiple values, by providing an iterable argument value
    insert() - inserts a single value at a specific index position
    remove() - removes the first occurance of a specific element
    pop() - removes and returns the last element added to the list
    clear() - removes all elements from the list
    sort() - sorts the contents of the list
    reverse() - reverses the position of all elements in the list

The methods that only access the list are -
    index() - returns the index of a specific element
    count() - returns the count of how many times a specific element appears
    copy() - returns a shallow copy of the list


Tuples:
    ● Method
    ● List comprehension
    ● Tuple
    ● Tuple Packing
    ● Sequence Unpacking
